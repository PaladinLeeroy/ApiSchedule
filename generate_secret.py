#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SECRET_KEY
"""
import secrets
import string
import base64
import os

def generate_secret_key(method="urlsafe", length=32):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π SECRET_KEY
    
    Args:
        method (str): –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ('urlsafe', 'hex', 'base64', 'alphanumeric')
        length (int): –î–ª–∏–Ω–∞ –∫–ª—é—á–∞
    
    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SECRET_KEY
    """
    
    if method == "urlsafe":
        # URL-–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
        return secrets.token_urlsafe(length)
    
    elif method == "hex":
        # –®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        return secrets.token_hex(length)
    
    elif method == "base64":
        # Base64 —Å—Ç—Ä–æ–∫–∞
        return base64.b64encode(secrets.token_bytes(length)).decode('utf-8')
    
    elif method == "alphanumeric":
        # –ë—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        alphabet = string.ascii_letters + string.digits
        return ''.join(secrets.choice(alphabet) for _ in range(length))
    
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {method}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä SECRET_KEY")
    print("=" * 50)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    methods = {
        "urlsafe": "URL-–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
        "hex": "–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞",
        "base64": "Base64 —Å—Ç—Ä–æ–∫–∞",
        "alphanumeric": "–ë—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞"
    }
    
    for method, description in methods.items():
        key = generate_secret_key(method)
        print(f"\nüìã {description}:")
        print(f"SECRET_KEY={key}")
        print(f"–î–ª–∏–Ω–∞: {len(key)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    print("\n" + "=" * 50)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –í–ê–†–ò–ê–ù–¢ –¥–ª—è Timeweb:")
    recommended_key = generate_secret_key("urlsafe", 32)
    print(f"SECRET_KEY={recommended_key}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env —Å –ø—Ä–∏–º–µ—Ä–æ–º
    print("\n" + "=" * 50)
    print("üìù –°–æ–∑–¥–∞—é —Ñ–∞–π–ª .env.example —Å –ø—Ä–∏–º–µ—Ä–æ–º:")
    
    env_content = f"""# Database Configuration
DATABASE_URL=sqlite:///./app.db

# Security (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–ó–ú–ï–ù–ò–¢–ï –í –ü–†–û–î–ê–ö–®–ï–ù–ï!)
SECRET_KEY={recommended_key}
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Server Configuration
HOST=0.0.0.0
PORT=8000
DEBUG=False

# Environment
ENVIRONMENT=production
"""
    
    with open('.env.example', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("‚úÖ –§–∞–π–ª .env.example —Å–æ–∑–¥–∞–Ω!")
    print("\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç SECRET_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Timeweb Cloud Apps")

if __name__ == "__main__":
    main() 